# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#name
name: "Build and Publish Docker Images"

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#env
env:
  # https://meta.nxvms.com/downloads/patches
  NXMETA_LATEST_VERSION: "5.0.0.35062"
  NXMETA_LATEST_URL: "https://updates.networkoptix.com/metavms/5.0.0.35062%20R9/linux/metavms-server-5.0.0.35062-linux_x64.deb"
  NXMETA_STABLE_VERSION: "4.2.0.33313"
  NXMETA_STABLE_URL: "https://updates.networkoptix.com/metavms/4.2.0.33313%20P2/linux/metavms-server-4.2.0.33313-linux64-patch.deb"

  # https://beta.networkoptix.com/beta-builds/default/
  NXWITNESS_LATEST_VERSION: "5.0.0.35064"
  NXWITNESS_LATEST_URL: "http://updates.networkoptix.com/default/5.0.0.35064/linux/nxwitness-server-5.0.0.35064-linux_x64.deb"
  NXWITNESS_STABLE_VERSION: "4.2.0.34860"
  NXWITNESS_STABLE_URL: "https://updates.networkoptix.com/default/4.2.0.34860/linux/nxwitness-server-4.2.0.34860-linux64-patch.deb"

  # https://dwspectrum.digital-watchdog.com/download/linux
  DWSPECTRUM_LATEST_VERSION: "4.2.0.32842"
  DWSPECTRUM_LATEST_URL: "https://updates.networkoptix.com/digitalwatchdog/32842/linux/dwspectrum-server-4.2.0.32842-linux64.deb"
  DWSPECTRUM_STABLE_VERSION: "4.2.0.32842"
  DWSPECTRUM_STABLE_URL: "https://updates.networkoptix.com/digitalwatchdog/32842/linux/dwspectrum-server-4.2.0.32842-linux64.deb"

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
on:
  push:
    branches: [main, develop]
    paths-ignore: [README.md]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # https://crontab.guru/
    # Rebuild 2am every Monday, LSIO rebuilds on Friday's
    # TODO: Figure out how to build main and develop vs. just the default branch
    - cron: "0 2 * * MON"

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobs
jobs:
  # Set the build matrix from ./Make/Matrix.json
  # Use a build step to allow environment variable substitution
  setmatrix:
    name: "Set Matrix"
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - name: "Set Matrix JSON"
        id: set-matrix
        # Convert the JSON to a single flat line to avoid having to escape the multiline output
        # TODO: How to load a JSON file and perform variable substitution?
        run: |
          JSON='
            [
              {
                "name": "NxMeta-LSIO Latest Develop",
                "enable": "${{ (github.ref == 'refs/heads/develop') }}",
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta-LSIO",
                "tags": [
                  "ptr727/nxmeta-lsio:develop",
                  "ptr727/nxmeta-lsio:develop-latest",
                  "ptr727/nxmeta-lsio:develop-${{ env.NXMETA_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_LATEST_URL }}"
                ]
              },
              {
                "name": "NxMeta-LSIO Stable Develop",
                "enable": "${{ (github.ref == 'refs/heads/develop') }}",
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta-LSIO",
                "tags": [
                  "ptr727/nxmeta-lsio:develop-stable",
                  "ptr727/nxmeta-lsio:develop-${{ env.NXMETA_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_STABLE_URL }}"
                ]
              },
              {
                "name": "NxMeta-LSIO Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta-LSIO",
                "tags": [
                  "ptr727/nxmeta-lsio:latest",
                  "ptr727/nxmeta-lsio:${{ env.NXMETA_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_LATEST_URL }}"
                ]
              },
              {
                "name": "NxMeta-LSIO Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta-LSIO",
                "tags": [
                  "ptr727/nxmeta-lsio:stable",
                  "ptr727/nxmeta-lsio:${{ env.NXMETA_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_STABLE_URL }}"
                ]
              },
              {
                "name": "NxMeta Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta",
                "tags": [
                  "ptr727/nxmeta:latest",
                  "ptr727/nxmeta:${{ env.NXMETA_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_LATEST_URL }}"
                ]
              },
              {
                "name": "NxMeta Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxMeta",
                "tags": [
                  "ptr727/nxmeta:stable",
                  "ptr727/nxmeta:${{ env.NXMETA_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXMETA_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXMETA_STABLE_URL }}"
                ]
              },
              {
                "name": "NxWitness-LSIO Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxWitness-LSIO",
                "tags": [
                  "ptr727/nxwitness-lsio:latest",
                  "ptr727/nxwitness-lsio:${{ env.NXWITNESS_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXWITNESS_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXWITNESS_LATEST_URL }}"
                ]
              },
              {
                "name": "NxWitness-LSIO Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxWitness-LSIO",
                "tags": [
                  "ptr727/nxwitness-lsio:stable",
                  "ptr727/nxwitness-lsio:${{ env.NXWITNESS_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXWITNESS_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXWITNESS_STABLE_URL }}"
                ]
              },
              {
                "name": "NxWitness Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxWitness",
                "tags": [
                  "ptr727/nxwitness:latest",
                  "ptr727/nxwitness:${{ env.NXWITNESS_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXWITNESS_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXWITNESS_LATEST_URL }}"
                ]
              },
              {
                "name": "NxWitness Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./NxWitness",
                "tags": [
                  "ptr727/nxwitness:stable",
                  "ptr727/nxwitness:${{ env.NXWITNESS_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.NXWITNESS_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.NXWITNESS_STABLE_URL }}"
                ]
              },
              {
                "name": "DWSpectrum-LSIO Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./DWSpectrum-LSIO",
                "tags": [
                  "ptr727/dwspectrum-lsio:latest",
                  "ptr727/dwspectrum-lsio:${{ env.DWSPECTRUM_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.DWSPECTRUM_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.DWSPECTRUM_LATEST_URL }}"
                ]
              },
              {
                "name": "DWSpectrum-LSIO Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./DWSpectrum-LSIO",
                "tags": [
                  "ptr727/dwspectrum-lsio:stable",
                  "ptr727/dwspectrum-lsio:${{ env.DWSPECTRUM_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.DWSPECTRUM_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.DWSPECTRUM_STABLE_URL }}"
                ]
              },
              {
                "name": "DWSpectrum Latest",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./DWSpectrum",
                "tags": [
                  "ptr727/dwspectrum:latest",
                  "ptr727/dwspectrum:${{ env.DWSPECTRUM_LATEST_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.DWSPECTRUM_LATEST_VERSION }}",
                  "DOWNLOAD_URL=${{ env.DWSPECTRUM_LATEST_URL }}"
                ]
              },
              {
                "name": "DWSpectrum Stable",
                "enable": true,
                "push": "${{ (github.event_name != 'pull_request') }}",
                "context": "./DWSpectrum",
                "tags": [
                  "ptr727/dwspectrum:stable",
                  "ptr727/dwspectrum:${{ env.DWSPECTRUM_STABLE_VERSION }}"
                ],
                "args": [
                  "DOWNLOAD_VERSION=${{ env.DWSPECTRUM_STABLE_VERSION }}",
                  "DOWNLOAD_URL=${{ env.DWSPECTRUM_STABLE_URL }}"
                ]
              }
            ]'
          echo "JSON:"
          echo "$JSON"
          echo "Flat JSON:"
          FJSON=$(echo "$JSON" | jq --compact-output)
          echo "$FJSON"
          echo "::set-output name=matrix::${FJSON}"

  # Verify correctness of the JSON Matrix
  verifymatrix:
    needs: setmatrix
    name: "Verify Matrix"
    runs-on: ubuntu-latest

    steps:
      - name: "Print Raw Matrix"
        # As received
        run: |
          echo "Raw:"
          echo "${{ needs.setmatrix.outputs.matrix }}"
      - name: "Print JSON Matrix"
        # Converted from JSON and back to JSON
        run: |
          echo "JSON"
          echo "${{ toJson(fromJson(needs.setmatrix.outputs.matrix)) }}"

  # Build and publish docker images
  buildpublish:
    needs: [verifymatrix, setmatrix]
    name: "Build and Publish Docker Images"
    runs-on: ubuntu-latest

    strategy:
      # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
      matrix:
        containers: ${{ fromJson(needs.setmatrix.outputs.matrix) }}

    steps:
      # https://github.com/actions/checkout
      - name: "Checkout Code"
        uses: actions/checkout@v2

      # https://github.com/docker/setup-qemu-action
      - name: "Setup QEMU"
        uses: docker/setup-qemu-action@v1

      # https://github.com/docker/setup-buildx-action
      - name: "Setup Docker Buildx"
        uses: docker/setup-buildx-action@v1

      # https://github.com/marketplace/actions/docker-login
      - name: "Login to Docker Hub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # TODO: Publish to GHCR

      # Convert JSON array to a multiline string
      # Join using ',' as separator, join() function does not work with '\n'
      # https://github.community/t/how-to-convert-json-string-array-to-multiple-strings/260525/4
      # Replace ',' with '\n' using tr
      # Encode multiline variables to allow cross step transfer
      # https://github.community/t/set-output-truncates-multiline-strings/16852/2
      - name: "Array to MultiLine"
        id: array_to_multiline
        run: |
          # Convert tags
          echo "JSON Tags:"
          echo "${{ toJson(matrix.containers.tags) }}"
          echo "Joined Tags"
          JTags="${{ join(matrix.containers.tags, ',') }}"
          echo $JTags
          echo "MultiLine Tags:"
          MLTags=$JTags
          MLTags="${MLTags//'%'/'%25'}"
          MLTags="${MLTags//$'\n'/'%0A'}"
          MLTags="${MLTags//$'\r'/'%0D'}"
          echo "::set-output name=tags::${MLTags}"
          # Convert args
          echo "JSON Args:"
          echo "${{ toJson(matrix.containers.args) }}"
          echo "Joined Args"
          JArgs="${{ join(matrix.containers.args, ',') }}"
          echo $JArgs
          echo "MultiLine Args:"
          MLArgs=$JArgs
          MLArgs="${MLArgs//'%'/'%25'}"
          MLArgs="${MLArgs//$'\n'/'%0A'}"
          MLArgs="${MLArgs//$'\r'/'%0D'}"
          echo "::set-output name=tags::${MLArgs}"

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: "Build and Push"
        uses: docker/build-push-action@v2
        if: ${{ matrix.containers.enable }}
        with:
          context: ${{ matrix.containers.context }}
          file: ${{ matrix.containers.context }}/Dockerfile
          platforms: linux/amd64
          push: ${{ matrix.containers.push }}
          # Use the converted multiline values
          tags: ${{ steps.array_to_multiline.outputs.tags }}
          build-args: ${{ steps.array_to_multiline.outputs.args }}
